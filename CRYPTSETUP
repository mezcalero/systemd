# Using a Yubikey for unlocking arbitrary LUKS devices.
#
# A few notes on the used parameters:
#
# → We use RSA (and not ECC), since Yubikeys support PKCS#11 Decrypt() only for
#   RSA keys (ECC keys can only be used for signing?)
# → We use RSA2048, which is the longest key size current Yubikeys support for
#   RSA
# → LUKS key size must be << 2048bit due to RSA padding, hence we use 128 bytes
# → We use Yubikey key slot 9d, since that's apparently the keyslot to use for
#   decryption purposes, see:
#   https://developers.yubico.com/PIV/Introduction/Certificate_slots.html

# Make sure noone can read the files we generate, but us
umask 077

# Clear the Yubikey from any old keys
ykman piv reset

# Generate a new private/public key pair on th device, store the public key in
# 'pubkey.pem'.
ykman piv generate-key -a RSA2048 9d pubkey.pem

# Create a self-signed certificate from this public key, and store it on the
# device.
ykman piv generate-certificate --subject "Knobelei" 9d pubkey.pem

# Check if the newly create key on the Yubikey shows up as token in
# PKCS#11. Have a look at the output, and copy the resulting token URI to the
# clipboard.
p11tool --list-tokens

# Generate a (secret) random key to use as LUKS decryption key.
dd if=/dev/urandom of=plaintext.bin bs=128 count=1

# Encrypt this newly generated LUKS decryption key using the public key whose
# private key is on the Yubikey, store the result in
# /etc/encrypted-luks-key.bin, where we'll look for it during boot.
openssl rsautl -encrypt -pubin -inkey pubkey.pem -in plaintext.bin -out /etc/encrypted-luks-key.bin

# Configure the LUKS decryption key on the LUKS device. We use very low pbkdf
# settings since the key already has quite a high quality (it comes directly
# from /dev/urandom after all), and thus we don't need to do much key
# derivation.
cryptsetup luksAddKey /dev/sda1 plaintext.bin --pbkdf-memory=32 --pbkdf-parallel=1 --pbkdf-force-iterations=4

# Now securely delete the plain text LUKS key, we don't need it anymore, and
# since it contains secret key material it should be removed from disk
# thoroughly.
shred -u plaintext.bin

# We don't need the public key anymore either, let's remove it too. Since this
# one is not security sensitive we just do a regular "rm" here.
rm pubkey.pem

# Test: Let's run systemd-cryptsetup to test if this all worked. The option
# string should contain the full PKCS#11 URI we have in the clipboard, it tells
# the tool how to decypher the encrypted LUKS key.
systemd-cryptsetup attach mytest /dev/sda1 /etc/encrypted-luks-key.bin 'pkcs11-uri=pkcs11:…'

# If that worked, let's now add the same line persistently to /etc/crypttab,
# for the future.
echo "mytest /dev/sda1 /etc/encrypted-luks-key 'pkcs11-uri=pkcs11:…' >> /etc/crypttab
